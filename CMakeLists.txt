
cmake_minimum_required(VERSION 3.13)  # Automatically generated syntax

# project(Sandbox) --> When CLion project is created, it is automatically created if it is created as c project,
# Because of this, the C++ gtest is not built.
# Therefore, remove c as below.
project(Sandbox)

set(CMAKE_C_STANDARD 11) # Automatic generation syntax when creating a C project
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
# Clang Sandbox libraries list
file(GLOB Sandbox_CLang "Sandbox_CLang/source/inc/*.h" "Sandbox_CLang/source/src/*.c")
file(GLOB OOC "Sandbox_CLang/ooc/inc/*.h" "Sandbox_CLang/ooc/src/*.c")
file(GLOB DATASTRUCT "Sandbox_CLang/Data_Struct/inc/*.h" "Sandbox_CLang/Data_Struct/src/*.c")
file(GLOB CSTL "Sandbox_CLang/cstl/inc/*.h" "Sandbox_CLang/cstl/src/*.c" "Sandbox_CLang/cstl/test/*.c")
file(GLOB CSPTR "Sandbox_CLang/csptr/inc/*.h" "Sandbox_CLang/csptr/src/*.c")
file(GLOB SOCKETS "Sandbox_CLang/sockets/inc/*.h" "Sandbox_CLang/sockets/src/*.c")
file(GLOB BLUETOOTH "Sandbox_CLang/bluetooth/inc/*.h" "Sandbox_CLang/bluetooth/src/*.c")
# C++ Sandbox libraries list
file(GLOB Sandbox_CPP "Sandbox_CPP/source/inc/*.hpp" "Sandbox_CPP/source/src/*.cpp")
file(GLOB DATASTRUCT_CPP "Sandbox_CPP/Data_Struct/inc/*.hpp" "Sandbox_CPP/Data_Struct/src/*.cpp")
file(GLOB GRE_GAME "Sandbox_CPP/GRE_Game/inc/*.hpp" "Sandbox_CPP/GRE_Game/src/*.cpp")
# The Sandbox_CLang library (C code)
add_library(Sandbox_CLang SHARED ${Sandbox_CLang})
add_library(libOOC SHARED ${OOC})
add_library(libDataStruct SHARED ${DATASTRUCT})
add_library(libCSTL SHARED ${CSTL})
add_library(libCSPTR SHARED ${CSPTR})
add_library(libSockets SHARED ${SOCKETS})
add_library(libBluetooth SHARED ${BLUETOOTH})
# The Sandbox_C++ library (C code)
add_library(Sandbox_CPP SHARED ${Sandbox_CPP})
add_library(libDataStructCPP SHARED ${DATASTRUCT_CPP})
add_library(libGreGame SHARED ${GRE_GAME})
# Build an executable program using the plus library (C code)
# It is not used when performing only tests, so there is no need to build.
include_directories(Sandbox_CLang/source/inc)
include_directories(Sandbox_CLang/Data_Struct/inc)
include_directories(Sandbox_CLang/ooc/inc)
include_directories(Sandbox_CLang/cstl/inc)
include_directories(Sandbox_CLang/csptr/inc)
include_directories(Sandbox_CLang/sockets/inc)
include_directories(Sandbox_CLang/bluetooth/inc)
# C++ includes
include_directories(Sandbox_CPP/Data_Struct/inc)
include_directories(Sandbox_CPP/GRE_Game/inc)
include_directories(Sandbox_CPP/source/inc)
add_executable(SandboxClang Sandbox_CLang/main.c)
add_executable(SandboxCPP Sandbox_CPP/main.cpp)
target_link_libraries(SandboxClang Sandbox_CLang libOOC libDataStruct libCSTL libCSPTR libSockets libBluetooth pthread bluetooth)
target_link_libraries(SandboxCPP Sandbox_CPP libDataStructCPP libGreGame curl jsoncpp pthread)
# build gtest (C++ code)
find_package(GTest REQUIRED)
find_package(Threads REQUIRED)
enable_testing()


# Build test program (C++ code)
include_directories(${GTEST_SOURCE_DIR}/include ${GTEST_SOURCE_DIR})
add_executable(SandboxClangTests ./SandboxCLangTest.cpp)
add_executable(SandboxCPPTests ./SandboxCPPTest.cpp)
target_link_libraries(SandboxClangTests gtest gtest_main Sandbox_CLang libOOC libDataStruct libCSTL libCSPTR libSockets pthread)
target_link_libraries(SandboxCPPTests gtest gtest_main Sandbox_CPP libDataStructCPP libGreGame curl jsoncpp pthread)
# Not used (written for testing in the middle stage)
##set(CMAKE_CXX_STANDARD 11)
##set(CMAKE_C_COMPILER g++)
##set(CMAKE_CXX_LINK_EXECUTABLE cxx)
#add_subdirectory(googletest-release-1.8.1)
#set(gtest_SRC_DIR googletest-release-1.8.1)
#include_directories(${gtest_SRC_DIR}/googletest/include ${gtest_SRC_DIR}/googletest)
#add_executable(runSumTests main.cc sum_test.cc)
##set_target_properties(runSumTests PROPERTIES LINKER_LANGUAGE CXX)
#target_link_libraries(runSumTests gtest gtest_main)
#target_link_libraries(runSumTests libsum)